name: CI Workflow

on:
  pull_request:
    types:
      - synchronize
    branches:
      - develop

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      # 여기서부터는 빌드 및 테스트 등 필요한 단계를 추가합니다.
      # 예를 들어, 프로젝트를 빌드하고 테스트를 실행하는 등의 작업을 수행합니다.

  validate-approvals:
    name: Validate Approvals
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 원격 저장소에서 develop 브랜치의 최신 커밋 가져오기
      - name: Fetch develop branch
        run: git fetch origin develop:refs/remotes/origin/develop

      # 새로운 커밋에 대해 승인 상태 확인
      - name: Check for New Commits
        id: check_commits
        run: |
          # Find the merge base between the remote develop branch and the current commit
          MERGE_BASE=$(git merge-base origin/develop ${{ github.sha }})
          CHANGED_FILES=$(git diff --name-only $MERGE_BASE ${{ github.sha }})
          if [ -n "$CHANGED_FILES" ]; then
            # 새로운 커밋이 있을 때만 승인 상태 확인
            APPROVALS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" \
                | jq '.[] | select(.state == "APPROVED")')
            if [ -z "$APPROVALS" ]; then
              echo "Approvals are required before merging to develop branch."
              exit 1
            else
              echo "Approvals are received. Ready for merge."
            fi
          else
            echo "No new commits. No need to validate approvals."
          fi

      # 새로운 커밋에 대해 승인 상태 확인
      # - name: Check for Approval
      #   id: check_approval
      #   run: |
      #     APPROVALS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #         "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" \
      #         | jq '.[] | select(.state == "APPROVED")')
      #     if [ -z "$APPROVALS" ]; then
      #       echo "Approvals are required before merging to develop branch."
      #       exit 1
      #     else
      #       echo "Approvals are received. Ready for merge."
      #     fi

  merge-to-develop:
    name: Merge to Develop
    runs-on: ubuntu-latest
    needs: validate-approvals
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Merge to Develop Branch
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git checkout develop
          git merge "${{ github.head_ref }}"
          git push
